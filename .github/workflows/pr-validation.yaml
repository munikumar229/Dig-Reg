name: Pull Request Validation

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.12'

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Lint code with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Check code formatting with black
        run: |
          pip install black
          black --check --diff .
        continue-on-error: true
          
      - name: Create data directory
        run: mkdir -p data/processed

      - name: Test data processing
        run: python scripts/process_data.py

      - name: Test model training
        run: |
          python scripts/train.py --model randomforest
          echo "✅ RandomForest model training test passed"
          
      - name: Validate project structure
        run: |
          echo "🔍 Validating project structure..."
          
          # Check if essential directories exist
          test -d "backend" || (echo "❌ Missing backend/ directory" && exit 1)
          test -d "frontend" || (echo "❌ Missing frontend/ directory" && exit 1)
          test -d "scripts" || (echo "❌ Missing scripts/ directory" && exit 1)
          test -d "deployment" || (echo "❌ Missing deployment/ directory" && exit 1)
          
          # Check if essential files exist
          test -f "backend/main.py" || (echo "❌ Missing backend/main.py" && exit 1)
          test -f "frontend/app.py" || (echo "❌ Missing frontend/app.py" && exit 1)
          test -f "deployment/docker-compose.yml" || (echo "❌ Missing docker-compose.yml" && exit 1)
          test -f "scripts/train.py" || (echo "❌ Missing scripts/train.py" && exit 1)
          test -f "scripts/process_data.py" || (echo "❌ Missing scripts/process_data.py" && exit 1)
          
          echo "✅ Project structure validation passed"

      - name: Test Docker builds (without push)
        run: |
          echo "🐳 Testing Docker builds..."
          
          # Test backend Docker build
          docker build -f deployment/Dockerfile.backend -t dig-reg-backend-test .
          echo "✅ Backend Docker build test passed"
          
          # Test frontend Docker build  
          docker build -f deployment/Dockerfile.frontend -t dig-reg-frontend-test .
          echo "✅ Frontend Docker build test passed"
          
      - name: Test docker-compose configuration
        run: |
          echo "🐳 Testing docker-compose configuration..."
          cd deployment
          docker-compose config
          echo "✅ Docker-compose configuration is valid"

      - name: PR Summary
        run: |
          echo "📋 Pull Request Validation Summary:"
          echo "✅ Code formatting checked"
          echo "✅ Dependencies installed"  
          echo "✅ Data processing tested"
          echo "✅ Model training tested"
          echo "✅ Project structure validated"
          echo "✅ Docker builds tested"
          echo "✅ Docker-compose configuration validated"
          echo ""
          echo "🎉 Pull Request is ready for review!"